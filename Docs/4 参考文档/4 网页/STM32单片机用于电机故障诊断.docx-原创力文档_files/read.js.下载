var read_stat_config = {
	key: 'LOCAL_PUSH_DATA',
	getStorage: function () {
		var local = localStorage.getItem(read_stat_config.key);
		return local ? JSON.parse(local) : [];
	},
	m: location.host.indexOf('m.book118.com') > -1 || location.host.indexOf('mpub.book118.com') > -1 || location.host.indexOf('m-dev.book118.com') > -1,
	env: ['max.book118.com', 'm.book118.com'].indexOf(location.host) > -1 ? 'pro' : ['p.book118.com', 'mpub.book118.com'].indexOf(location.host) > -1 ? 'pub' : 'dev',
	host: {
		dev: {
			maxapi: 'https://max-dev.book118.com',
			mpapi: 'https://dev-api.book118.com'
		},
		pub: {
			maxapi: 'https://p.book118.com',
			mpapi: 'https://pubapi.book118.com'
		},
		pro: {
			maxapi: 'https://max.book118.com',
			mpapi: 'https://api.book118.com'
		}
	}
}
var read_stat = {
	options: {},
	app: read_stat_config.m ? 'm' : 'pc',
	aid: '',
	data: read_stat_config.getStorage(),
	config: {
		time: 5,
		maxTime: 1800,
		lastTime: 0,
		maxPage: 10,
		maxLen: 100
	},
	success: null,
	timeLength: {
		open: true,
		timer: 0
	},
	dictEnum: {
		id: 'aid',
		maxPage: 'doc_max_read_page',
		page: 'max_read_page',
		time: 'last_read_time',
		timeLen: 'read_time_len',
		readCount: 'sum_read_cnt',
		app: 'last_read_port',
		refer: 'last_read_refer'
	},
	urls: {
		config: read_stat_config.host[read_stat_config.env].mpapi + '/applet/browse/getReadTimeConfig',
		push: read_stat_config.m ? read_stat_config.host[read_stat_config.env].mpapi + '/applet/browse/updateOneDocReadTime' : read_stat_config.host[read_stat_config.env].maxapi + '/user_center_v1/home/browse/updateOneDocReadTime'
	},
	// 不做浏览器关闭时事件的监听，因为在切换的时候也会被监听到，原则上切换的时候只是停止定时器
	/**
	 * 初始化
	 */
	init: function (options) {
		this.options = options ? options : {};
		if (!this.options.aid) {
			return console.error('缺少aid关键参数！');
		}
		this.timeLength.open = typeof this.options.time != 'undefined' ? this.options.time : true;
		this.aid = this.options.aid;
		this.config.maxPage = this.options.read;
		this.app = this.options.app ? this.options.app : this.app;
		this.success = this.options.success;
		this.getConfig();
		this.pageVisibleChange();
		this.baseInfo();
		this.setRefer();
		this.timeLen();
		this.readCount();
		this.setMaxPage();
		this.setPort();
		this.changePage(0);
		this.setLastTime(1);
	},
	/**
	 * 设置基础数据
	 */
	baseInfo: function () {
		this.data = read_stat_config.getStorage();
		var has = false;
		for (var i = 0; i < this.data.length; i++) {
			if (this.data[i][this.dictEnum.id] == this.aid) {
				has = true;
			}
		}
		if (!has) {
			this.data.unshift({ aid: this.aid })
		}
		this.setStorage();
	},
	/**
	 * 
	 * 获取基础配置
	 */
	getConfig: function () {
		var that = this;
		if (that.config.lastTime) return;
		$.ajax({
			url: this.urls.config,
			dataType: 'JSONP',
			success: function (res) {
				if (res.code == 200) {
					that.config.time = res.data.time;
					that.config.maxTime = res.data.maxTime;
					that.config.lastTime = res.data.lastTime;
					that.setLastTime();
					if (that.success) that.success();
				}
			}
		})
	},
	/**
	 * 监听页面获取焦点和失去焦点
	 */
	pageVisibleChange: function () {
		var that = this,
			hiddenProperty = 'hidden' in document ? 'hidden' : 'webkitHidden' in document ? 'webkitHidden' : 'mozHidden' in document ? 'mozHidden' : null,
			visibleChangeEvent = hiddenProperty.replace(/hidden/i, 'visibilitychange'),
			onVisibleChange = function () {
				if (!document[hiddenProperty] && that.timeLength.open) {
					that.timeLen();
				} else {
					that.closeTimeLen();
				}
			};
		document.addEventListener(visibleChangeEvent, onVisibleChange);
	},
	/**
	 * 储存需要提交的数据
	 * @returns obj - 设置成功  null - 没有需要储存的数据
	 */
	setStorage: function () {
		if (this.data) {
			var params = JSON.stringify(this.data);
			localStorage.setItem(read_stat_config.key, params);
			return params
		} else {
			return null;
		}
	},
	/**
	 * 删除本地缓存
	 */
	clearStorage: function () {
		localStorage.removeItem(read_stat_config.key);
	},
	/**
	 * 上报数据
	 */
	push: function (o) {
		var that = this,
			params = {},
			isLogin = typeof o.login != 'undefined' ? o.login : base.member.status,
			isNext = typeof o.next != 'undefined' ? o.next : true;
		this.data = read_stat_config.getStorage();
		if (that.data && that.data.length && isLogin) {
			params = {
				readTimeDatas: JSON.stringify(that.data)
			}
			if (base.member && base.member.token) {
				params.token = base.member.token;
			}
			$.ajax({
				type: 'POST',
				url: this.urls.push,
				data: params,
				dataType: 'JSONP',
				success: function (res) {
					if (res.code == 200) {
						that.closeTimeLen();
						that.clearStorage();
						if (that.aid && isNext) {
							that.options['success'] = null;
							that.init(that.options);
						} else {
							that.timeLength.open = false;
						}
					}
				}
			})
		}
	},
	/**
	 * 更新值并储存
	 * @param {Object} name 键
	 * @param {Object} value 值
	 */
	updateData: function (name, value) {
		this.data = read_stat_config.getStorage();
		for (var i = 0; i < this.data.length; i++) {
			if (this.data[i].aid == this.aid) {
				this.data[i][name] = value;
			}
		}
		this.data = this.data.splice(0,this.config.maxLen);
		this.setStorage();
	},
	/**
	 * 根据键获取数据中对应的值
	 * @param {Object} name 键
	 */
	getKeyValue: function (name) {
		var that = this,
			result = null,
			doFn = function () {
				this.data = read_stat_config.getStorage();
				for (var i = 0; i < this.data.length; i++) {
					if (this.data[i].aid == that.aid) {
						result = {
							name: name,
							value: this.data[i][name] ? this.data[i][name] : null
						}
					}
				}
			};
		doFn();
		if (!result && this.aid) {
			this.init(this.options);
			doFn();
		}
		return result;
	},
	/**
	 * 
	 * 获取并处理来源数据
	 */
	setRefer: function () {
		var name = this.dictEnum.refer;
		var refer = document.referrer;
		var referEnum = {
			baidu: 'se_baidu',
			"360": 'se_360',
			bing: 'se_bing',
			sougou: 'se_sogou',
			toutiao: 'se_toutiao',
			shenma: 'se_shenma',
			other: 'se_other',
			inder: 'in_index',
			search: 'in_search',
			detail: 'in_detail',
			classify: 'in_cate',
			inother: 'in_other'
		}
		if (refer.indexOf('baidu.com') > -1 || refer.indexOf('mip.book118.com') > -1) {
			this.updateData(name, referEnum.baidu);
		} else if (refer.indexOf('so.com') > -1) {
			this.updateData(name, referEnum["360"]);
		} else if (refer.indexOf('bing.com') > -1) {
			this.updateData(name, referEnum.bing);
		} else if (refer.indexOf('sogou.com') > -1) {
			this.updateData(name, referEnum.sougou);
		} else if (refer.indexOf('toutiao.com') > -1) {
			this.updateData(name, referEnum.toutiao);
		} else if (refer.indexOf('sm.cn') > -1) {
			this.updateData(name, referEnum.shenma);
		} else if (refer.indexOf('book118.com') > -1 && refer.indexOf('search') > -1) {
			this.updateData(name, referEnum.search);
		} else if (refer.indexOf('book118.com') > -1 && (refer.indexOf('/docs/') > -1 || refer.indexOf('/doclist/') > -1)) {
			this.updateData(name, referEnum.classify);
		} else if (refer.indexOf('book118.com') > -1 && refer.indexOf('/html/') > -1) {
			this.updateData(name, referEnum.detail);
		} else if (refer == 'https://max.book118.com/' || refer == 'https://m.book118.com/') {
			this.updateData(name, referEnum.inder);
		} else if (refer.indexOf('max.book118.com') > -1) {
			this.updateData(name, referEnum.inother);
		} else {
			this.updateData(name, referEnum.other);
		}
	},
	/**
	 * 阅读时长
	 */
	timeLen: function () {
		var that = this,
			name = this.dictEnum.timeLen,
			value = this.getKeyValue(name).value;
		value = value ? value : 0;
		if (!value) this.updateData(name, 0)
		if (!this.timeLength.open) return;
		this.closeTimeLen();
		this.timeLength.timer = setInterval(function () {
			value = that.getKeyValue(name).value;
			len = value + that.config.time;
			if (len > that.config.maxTime) {
				that.updateData(name, len - that.config.time);
				that.push({
					next: false
				});
				that.closeTimeLen();
			} else {
				that.updateData(name, len);
			}
		}, this.config.time * 1000)
	},
	/**
	 * 关闭阅读时长统计
	 */
	closeTimeLen: function (time) {
		if (typeof time != 'undefined') this.timeLength.open = time;
		clearInterval(this.timeLength.timer);
	},
	/**
	 * 更新阅读页数
	 * @param {Object} page 页码
	 */
	changePage: function (page) {
		var name = this.dictEnum.page,
			value = this.getKeyValue(name).value;
		value = value ? value : 0;
		if (page >= value) {
			this.updateData(name, page);
		}
	},
	/**
	 * 更新阅读次数
	 */
	readCount: function () {
		var name = this.dictEnum.readCount,
			value = this.getKeyValue(name).value;
		value = value ? value : 0;
		value = value + 1;
		this.updateData(name, value);
	},
	/**
	 * 设置最大阅读页数
	 */
	setMaxPage: function () {
		var name = this.dictEnum.maxPage,
			value = this.config.maxPage;
		this.updateData(name, value);
	},
	/**
	 * 设置最后阅读时间
	 */
	setLastTime: function (start) {
		var name = this.dictEnum.time,
			value = start ? 0 : this.config.lastTime;
		this.updateData(name, value);
	},
	/**
	 * 设置最后阅读时间
	 */
	setPort: function () {
		var name = this.dictEnum.app,
			value = this.app;
		this.updateData(name, value);
	}
}